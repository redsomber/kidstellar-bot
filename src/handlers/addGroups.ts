import { MyContext, MyConversation } from '@/helpers/bot'
import addGroupMenu from '@/menus/addGroupMenu'
import getChatIdByUsername from '@/helpers/getChat'

export default async function addGroups(
  conversation: MyConversation,
  ctx: MyContext
) {
  await ctx.reply(
    '–í–≤–µ–¥–∏—Ç–µ –ª–∏–Ω–∫–∏ –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ —Å–ª–µ—à:\n\n–ü—Ä–∏–º–µ—Ä:\n@channel_1/@channel_2...'
  )

  const { message } = await conversation.wait()

  if (!message?.text) {
    await ctx.reply(
      '–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–µ —á–∞—Ç—ã —á–µ—Ä–µ–∑ —Å–ª–µ—à.'
    )
    return
  }

  const usernames = message.text.split('/').map((username) => username.trim())
  let responseText = ''

  const addedGroups = []

  for (const username of usernames) {
    const chatInfo = await getChatIdByUsername(username)
    if (chatInfo) {
      const { id, title, username } = chatInfo
      addedGroups.push({ group_id: id, group_username: username, title: title })
      responseText += `üÜó@${username} | Title: ${title}\n`
    } else {
      responseText += `‚ùå–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å ID ${username}\n`
    }
  }

  conversation.session.addedGroups = addedGroups

  await ctx.reply(
    `–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ —á–∞—Ç—ã:\n\n${responseText}\n\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è?`,
    {
      reply_markup: addGroupMenu,
    }
  )
}
