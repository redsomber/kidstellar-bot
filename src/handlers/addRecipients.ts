import { MyContext, MyConversation } from '@/helpers/bot'
import addRecipientMenu from '@/menus/addRecipientMenu'
import getUserIdByUsername from '@/helpers/getUser'

export default async function addRecipients(
  conversation: MyConversation,
  ctx: MyContext
) {
  await ctx.reply(
    '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ —Å–ª–µ—à:\n\n–ü—Ä–∏–º–µ—Ä:\n505211555/987654777...'
  )

  const { message } = await conversation.wait()

  if (!message?.text) {
    await ctx.reply('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID —á–µ—Ä–µ–∑ —Å–ª–µ—à.')
    return
  }

  const usernames = message.text.split('/').map((username) => username.trim())
  let responseText = ''

  const addedUsers = []

  for (const username of usernames) {
    const userInfo = await getUserIdByUsername(username)
    if (userInfo) {
      const { id, username } = userInfo
      addedUsers.push({ user_id: id, username })
      responseText += `üÜó@${username} id: ${id}\n`
    } else {
      responseText += `‚ùå–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${username}\n`
    }
  }

  conversation.session.addedUsers = addedUsers

  await ctx.reply(
    `–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n${responseText}\n\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–∏?`,
    { reply_markup: addRecipientMenu }
  )
}
