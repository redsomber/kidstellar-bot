import { Group, GroupModel } from '@/models/Group'
import { MyContext, MyConversation } from '@/helpers/bot'
import toggleGroupMenu from '@/menus/toggleGroupMenu'

export default async function toggleGroups(
  conversation: MyConversation,
  ctx: MyContext
) {
  try {
    const groups = await GroupModel.find().exec()

    if (groups.length === 0) {
      await ctx.reply('–ù–µ—Ç —á–∞—Ç–æ–≤.')
      return
    }

    const groupList = groups
      .map(
        (group, index) =>
          `${index + 1}) ${group.turn_on ? '‚úÖ' : 'üö´'} @${
            group.group_username
          } `
      )
      .join('\n')

    await ctx.reply(
      `–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —á–∞—Ç—ã:\n${groupList}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è\n\n–ü—Ä–∏–º–µ—Ä:\n1/3/4`
    )

    const { message } = await conversation.wait()

    if (!message?.text) {
      return console.log('Empty message')
    }

    const input = message.text.split('/').map((num) => parseInt(num, 10) - 1)

    if (input.some((index) => index < 0 || index >= groups.length)) {
      await ctx.reply('–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
      return
    }

    const selectedGroups: Group[] = input.map((index) => groups[index])
    const selectedGroupList = selectedGroups
      .map(
        (group) =>
          `${group.turn_on ? '‚úÖ' : 'üö´'} @${
            group.group_username || 'unknown'
          } `
      )
      .join('\n')

    conversation.session.selectedGroups = selectedGroups

    await ctx.reply(
      `–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ —á–∞—Ç—ã:\n${selectedGroupList}\n\n–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∏—Ö?`,
      {
        reply_markup: toggleGroupMenu,
      }
    )
  } catch (error) {
    console.error('Failed to handle toggle group command:', error)
    await ctx.reply('–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')
  }
}
